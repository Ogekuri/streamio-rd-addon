name: Release

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}  # Nome del repository GitHub (user/repo)

on:
  push:
    tags:
      - 'v*' # Attiva il workflow per qualsiasi tag che inizia con "v"

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write # Permessi per caricare pacchetti
      attestations: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          tag_name: ${{ github.ref_name }} # Nome del tag
          name: Release ${{ github.ref_name }}  # Nome della release
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download auto-generated ZIP
        run: curl -L -o ${{ github.ref_name }}.zip https://github.com/${{ github.repository }}/archive/refs/tags/${{ github.ref_name }}.zip

      - name: Upload Asset on Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ github.ref_name }}.zip
          asset_name: ${{ github.ref_name }}.zip
          asset_content_type: application/zip
        env:                                         # Se il GITHUB_TOKEN non funziona, puoi utilizzare un Personal Access Token (PAT) con i permessi adeguati.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Un PAT può essere utilizzato al posto di GITHUB_TOKEN
                                                     # Usa il PAT come token, scade il 26/11/2025

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:v0.0.37
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Notify success
        run: echo "Release created!"

      # - name: Publish Package to GitHub Packages
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     curl -X PUT \
      #     -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
      #     -H "Content-Type: application/zip" \
      #     --data-binary @./${{ github.ref_name }}.zip \
      #     "https://uploads.github.com/repos/${{ github.repository_owner }}/${{ github.repository }}/packages/assets?name=${{ github.ref_name }}.zip"

      # This workflow uses actions that are not certified by GitHub.
      # They are provided by a third-party and are governed by
      # separate terms of service, privacy policy, and support
      # documentation.

      # - name: Build and push Docker image
      #   uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     platforms: ${{ matrix.platforms }}
      #     push: true
      #     outputs: type=image,name=target,annotation-index.org.opencontainers.image.description=My multi-arch image
      #   env:                                         # Se il GITHUB_TOKEN non funziona, puoi utilizzare un Personal Access Token (PAT) con i permessi adeguati.
      #     GITHUB_TOKEN: ${{ secrets.GH_PAT }}  # Un PAT può essere utilizzato al posto di GITHUB_TOKEN
      #                                                # Usa il PAT come token, scade il 26/11/2025

